;A4Q3 - GCD of 2 numbers.
.orig x3000
main
LD R6,stackbase ;set up RTS
; put your code for the mainline here
;
LD R1,a ;First getting the value of parameter a
ADD R6,R6,#-1
STR R1,R6,#0 ; pushing parameter a in the RTS
;
LD R1,b ;Now getting the value of parameter b
ADD R6,R6,#-1
STR R1,R6,#0 ; pushing parameter b in the RTS
ADD R6,R6,#-1 ; Allocating 1 word for return value
;
JSR GCD ; Calling subroutine GCD
; Store the GCD of the two numbers at label result.
LDR R0,R6,#0 ; popping the GCD
ADD R6,R6,#3 ; returning to stackbase <--
ST R0,result ; saving the result
HALT


a .fill 66 ;change a and b to test your program with different values
b .fill 12
result .blkw 1
stackbase .fill 0x4000
;---------------------------
; GCD
; R5+0, R5+1 and R5+2 forms the activation record
; calculate the GCD using the parameters passed
; Following is the Register (Data) Dictionary
; R1: Holds parameter 1
; R2: Holds parameter 2
; R3: Holds result of checks for loop condition.
; R5: Frame pointer
; R6: Stack pointer
;-----------------------
GCD
;put your code to implement the GCD subroutine here
; Save the contents of R5
ADD R6,R6,#-1
STR R5,R6,#0
ADD R5,R6,#1 ; R5 pointing to the top of the activation record
ADD R6,R6,#-1
STR R1,R6,#0 ;saving contents of R1
ADD R6,R6,#-1
STR R2,R6,#0 ;saving the contents of R2
ADD R6,R6,#-1

STR R3,R6,#0 ;saving the contents of R3
; following lines calculate the GCD using the algorithm provided in the question
LDR R1,R5,#2 ; R1 holds the parameter a
LDR R2,R5,#1 ; R2 holds the parameter b
;----------------------
loopA
; Check loopA condition a not equal to b.
NOT R1,R1 ; negating R1 (a)
ADD R1,R1,#1 ; adding 1 to make R1 (a) negative - later in line 97 it is reversed when conditi
ADD R3,R1,R2 ; adding with R2 (b)
BRz endA ; if result is zero condition is not satisfied to do inner loops
;---------------------
NOT R1,R1
ADD R1,R1,#1 ; Revert the value of R1 after checking to positive when a is not = b
NOT R2,R2
ADD R2,R2,#1 ; making R2 negative.
;---------------------
loopB
ADD R3,R1,R2 ; R3 is now a-b
BRnz endB ; checking loopB condition if a>b; if it is not positve going to endB
;----
AND R1,R1,#0
ADD R1,R1,R3 ; Perform a = a-b
BR loopB
;---------------------
endB
endB
NOT R2,R2
ADD R2,R2,#1 ; first revert the value of R2 -that is, making it positive
NOT R1,R1
ADD R1,R1,#1 ; making the value of R1 negative.
;----------------------
loopC
ADD R3,R2,R1 ; R3 now holds b-a.
BRnz endC ; Check loopC condition; ie if b>a; if not going to endC
AND R2,R2,#0
ADD R2,R2,R3 ; Perform b = b-a.
BR loopC
;----------------------
endC
; Revert the value of R1.
NOT R1,R1
ADD R1,R1,#1
BR loopA
;-----------------------
endA
NOT R1,R1
ADD R1,R1,#1 ; Reverse the value of R1 to postive
STR R1,R5,#0 ; Store the value of R1 (a) as the return value.
LDR R3,R6,#0 ; Restore the value of R3.
ADD R6,R6,#1 ; update the stack pointer
LDR R2,R6,#0 ; Restore the value of R2.

ADD R6,R6,#1 ; update the stack pointer
LDR R1,R6,#0 ; Restore the value of R1.
ADD R6,R6,#1
LDR R5,R6,#0 ; Restore the value of R5 (return value)
ADD R6,R6,#1 ; update the stack pointer
RET
;------------------------
