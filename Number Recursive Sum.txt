;General Rules for advice Recursive Subroutines 

; How to use ur registers 
; R6 is ur global variable and it will act as your stack pointer -- points to the top of the user runtime stack.
; R5 will be your frame pointer -- points to the top of ur Activation Record. 
; R7 

; Steps for Subroutine 
; 1 . Initialise ur User Runtime stack by loading it into R6 - LD, R6, Stackbase 
; 2 . Push the arguments onto the stack and dont forget to leave space for the return value -- 
; ADD R6,R6,#-1
; STR Rx R6,#0 
; after doing all this call the subroutine by using JSR 
; Then on the next line u load the return value from the subroutine : 
; LDR R0,R6,#0
; After loading the return value remember to clear the activation stack by adding the number of arguments and return variables to the runtime stack :
;ADD R6,R6,#2

; Within the subroutine - u are gonna have ur base case and the recursive case : Rules for the recursive case : 

; Compute the arguments -- push the arguments and then set space aside for the return value on the runtime stack.
; After pushing the arguments onto the runtime stack call the subroutine using JSR 
; After u call the subroutine - u load the return value and then clear the activation record. 
; After doing that - u save the return value to R5, which is the frame pointer - stores the location of the return address. !



;Compute 1+2+3+...+n where n is given in the data region
;Assume n >= 0.

;Stack starts at 0x4000 (change as desired).

;A simple example of calling a subroutine that computes the Factorial of a number

	.orig x3000
Main
	LD R6,STACKBASE			;initialize stack pointer to 0x4000

	LD R1,n				;get n
	
	ADD R6,R6,#-1			;push n (argument) onto stack
	STR R1,R6,#0	

	ADD R6,R6,#-1			;set aside one word on stack for return value

	JSR Sum				;call Sum subroutine

	LDR R0,R6,#0			;get return value and put into R0

	ADD R6,R6,#2			;remove argument and return value from stack
	
	HALT				;stop program

;subroutine Sum recursively computes sum from 1 up to argument given in R5+1
;Data Dictionary
;R0 - This register will hold the value to be put into the return value slot 
;R1 - The value of the argument to this function. That is the content at R5+1
;R2 - R1 - 1. This is the argument to the recursive subroutine call
;R5 - Frame pointer
;R6 - Stack Pointer

;Stack Contents:
;R5+0 - return value
;R5+1 - Parameter 1 

Sum
	ADD R6,R6,#-1			;save R5, important since this routine may be called from another routine.
	STR R5,R6,#0
	
	ADD R5,R6,#1			;make R5 point to return value 

	ADD R6,R6,#-1			;save R0 (since we will be using it)
	STR R0,R6,#0

	ADD R6,R6,#-1			;save R1 (since we will be using it)
	STR R1,R6,#0


	ADD R6,R6,#-1			;save R2 (since we will be using it)
	STR R2,R6,#0

	ADD R6,R6,#-1			;save R7 (since we will be doing recursive calls)
	STR R7,R6,#0

	;do sum
	
	LDR R1,R5,#1			;load parameter into R1
	BRP Recurse			;check if argument is 0.  If so do base case, otherwise do recursive case
Base
	STR R1,R5,#0			;store 0 as return value
	BR Done

Recurse	
	ADD R2,R1,#-1			;compute arg. for recursive call
	ADD R6,R6,#-1			;push  argument onto stack
	STR R2,R6,#0	

	ADD R6,R6,#-1			;set aside one word on stack for return value

	JSR Sum				;call Sum subroutine

	LDR R0,R6,#0			;get return value of function call and put into R0
	ADD R6,R6,#2			;remove argument and return value from stack
	
	ADD R0,R0,R1			;compute the sum.

	STR R0,R5,#0			;store sum into mem addr for return value.

Done

	LDR R7,R6,#0			;restore R7
	ADD R6,R6,#1

	LDR R2,R6,#0			;restore R2
	ADD R6,R6,#1

	LDR R1,R6,#0			;restore R1
	ADD R6,R6,#1

	LDR R0,R6,#0			;restore R0
	ADD R6,R6,#1


	LDR R5,R6,#0			;restore R5
	ADD R6,R6,#1
	RET				;return from subroutine

;End of Subroutine Sum
	


STACKBASE	.FILL	x4000
n		.FILL	20	;assume this value must be >= 0

		.END

